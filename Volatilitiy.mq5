//+------------------------------------------------------------------+
//|                                                     ATRMartingaleEA.mq5 |
//|                             Generated by ChatGPT (OpenAI)         |
//+------------------------------------------------------------------+
#include <Trade\Trade.mqh>

input double ATR_Threshold = 0.0005;
input int    ATR_Period    = 14;
input ENUM_TIMEFRAMES ATR_Timeframe = PERIOD_CURRENT;

input int    MA_Period    = 50;
input ENUM_TIMEFRAMES MA_Timeframe = PERIOD_CURRENT;

input double Base_Lot  = 0.1;
input int    SL_Points = 50;
input int    TP_Points = 100;

input int    MagicNumber = 12345;

CTrade trade;

int    ATR_Handle;
int    MA_Handle;
int    tradeCount = 0;

//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
  {
   //--- create ATR indicator handle
   ATR_Handle = iATR(_Symbol, ATR_Timeframe, ATR_Period);
   if(ATR_Handle == INVALID_HANDLE)
     {
      Print("Failed to create ATR handle");
      return(INIT_FAILED);
     }
   //--- create SMA indicator handle
   MA_Handle = iMA(_Symbol, MA_Timeframe, MA_Period, 0, MODE_SMA, PRICE_CLOSE);
   if(MA_Handle == INVALID_HANDLE)
     {
      Print("Failed to create MA handle");
      return(INIT_FAILED);
     }
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   //--- release indicator handles
   if(ATR_Handle != INVALID_HANDLE) IndicatorRelease(ATR_Handle);
   if(MA_Handle  != INVALID_HANDLE) IndicatorRelease(MA_Handle);
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
  {
   //--- if no open position on symbol
   if(!PositionSelect(_Symbol))
     {
      // Only open base trade if not in a martingale sequence (tradeCount == 0)
      if(tradeCount == 0)
        {
         //--- copy latest ATR value
         double atrArray[];
         if(CopyBuffer(ATR_Handle, 0, 0, 1, atrArray) > 0)
           {
            ArraySetAsSeries(atrArray, true);
            double currentATR = atrArray[0];
            //--- check volatility threshold
            if(currentATR > ATR_Threshold)
              {
               //--- copy latest MA value
               double maArray[];
               if(CopyBuffer(MA_Handle, 0, 0, 1, maArray) > 0)
                 {
                  ArraySetAsSeries(maArray, true);
                  double currentMA = maArray[0];
                  //--- get current prices
                  double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
                  double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
                  //--- determine direction by price vs SMA
                  if(ask > currentMA)
                    {
                     //--- Buy signal
                     double stopLoss = NormalizeDouble(ask - SL_Points * _Point, _Digits);
                     double takeProfit = NormalizeDouble(ask + TP_Points * _Point, _Digits);
                     trade.Buy(Base_Lot, NULL, ask, stopLoss, takeProfit, NULL, MagicNumber);
                    }
                  else if(bid < currentMA)
                    {
                     //--- Sell signal
                     double stopLoss = NormalizeDouble(bid + SL_Points * _Point, _Digits);
                     double takeProfit = NormalizeDouble(bid - TP_Points * _Point, _Digits);
                     trade.Sell(Base_Lot, NULL, bid, stopLoss, takeProfit, NULL, MagicNumber);
                    }
                 }
              }
           }
        }
     }
  }
//+------------------------------------------------------------------+
//| Trade transaction handler                                        |
//+------------------------------------------------------------------+
void OnTradeTransaction(const MqlTradeTransaction &trans,
                        const MqlTradeRequest &request,
                        const MqlTradeResult  &result)
  {
   //--- handle only deal additions for this symbol and magic number
   if(trans.type == TRADE_TRANSACTION_DEAL_ADD && trans.symbol == _Symbol && trans.magic == MagicNumber)
     {
      //--- if a position was closed (deal entry out of market)
      if(trans.deal_entry == DEAL_ENTRY_OUT)
        {
         //--- closed by Stop Loss
         if(trans.reason == DEAL_REASON_SL)
           {
            //--- Martingale logic: up to 3 consecutive losses
            if(tradeCount < 3)
              {
               tradeCount++;
               //--- calculate next lot size (doubling each time)
               double newLot = Base_Lot * MathPow(2.0, tradeCount);
               //--- determine opposite direction by deal type
               if(trans.deal_type == DEAL_TYPE_SELL)
                 {
                  // last was BUY closed, now open SELL
                  double bid = SymbolInfoDouble(_Symbol, SYMBOL_BID);
                  double stopLoss = NormalizeDouble(bid + SL_Points * _Point, _Digits);
                  double takeProfit = NormalizeDouble(bid - TP_Points * _Point, _Digits);
                  trade.Sell(newLot, NULL, bid, stopLoss, takeProfit, NULL, MagicNumber);
                 }
               else if(trans.deal_type == DEAL_TYPE_BUY)
                 {
                  // last was SELL closed, now open BUY
                  double ask = SymbolInfoDouble(_Symbol, SYMBOL_ASK);
                  double stopLoss = NormalizeDouble(ask - SL_Points * _Point, _Digits);
                  double takeProfit = NormalizeDouble(ask + TP_Points * _Point, _Digits);
                  trade.Buy(newLot, NULL, ask, stopLoss, takeProfit, NULL, MagicNumber);
                 }
              }
            else
              {
               //--- reached max martingale trades, reset counter
               tradeCount = 0;
              }
           }
         else
           {
            //--- closed by Take Profit or other reason, reset martingale counter
            tradeCount = 0;
           }
        }
     }
  }
//+------------------------------------------------------------------+
